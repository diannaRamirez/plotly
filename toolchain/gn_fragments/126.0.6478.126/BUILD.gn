### FOR KALEIDO ###

# probably shouldn't be in app/
# but kaleido should not be in headless/
# if we're organized to OCD levels
# but this is intuitive, so its fine
static_library("dispatch") {
  sources = [
    "app/dispatch/dispatch.cc",
    "app/dispatch/dispatch.h",
  ]
  defines = []
  deps = [
    "//components/devtools/simple_devtools_protocol_client",
  ]

  public_deps = [
    "//base",
  ]
}

executable("kaleido") {
  sources = [
    "app/kaleido.cc",
    "app/kaleido_main.cc",
    "app/kaleido.h",
  ]
  deps = [
    ":dispatch",
  ]
  defines = []
  if (!is_component_build) {
    sources += [
      "lib/utility/headless_content_utility_client.cc",
      "lib/utility/headless_content_utility_client.h",
    ]
  }
  deps += [
    "//build:branding_buildflags",
    "//components/embedder_support",
    "//components/policy/content",
    "//components/security_state/content",
    "//content",
    "//content/public/app",
    "//content/public/browser",
    "//content/public/child:child",
    "//content/public/common",
    "//content/public/utility",
    "//printing/buildflags",
  ]
  if (proprietary_codecs) {
    deps += [ ":generate_headless_shell_license_file" ]
  }
  public_deps = [
    ":headless_non_renderer",
    "//base",
    "//third_party/inspector_protocol:crdtp",
  ]
  if (!is_component_build) {
    public_deps += [ ":headless_non_renderer" ]
  }
  if (!is_fuchsia) {
    deps += [ "//components/crash/content/browser" ]
  }
  if (enable_printing) {
    deps += [
      "//components/printing/browser",
      "//components/printing/browser/headless:headless",
      "//components/printing/renderer",
      "//components/services/print_compositor",
      "//components/services/print_compositor/public/mojom",
    ]
  }
  if (is_win) {
    defines = [ "HEADLESS_USE_CRASHPAD" ]
    deps += [
      "//components/crash/core/app:run_as_crashpad_handler",
      "//content:sandbox_helper_win",
      "//sandbox",
      "//build/win:default_exe_manifest",
      "//content/public/app",
    ]
    configs += [ "//build/config/win:delayloads" ]
  }
  if (is_mac) {
    deps += [ "//components/os_crypt/sync" ,
              "//sandbox/mac:seatbelt" ]
  }
  if (is_win || (is_posix && !is_mac)) {
    deps += [ "//components/crash/core/app" ]
  }
  configs -= [ "//build/config/compiler:thinlto_optimize_default" ]
  configs += [
    ":headless_defines_config",
    "//build/config/compiler:wexit_time_destructors",
    "//build/config/compiler:thinlto_optimize_max",
  ]
  assert(headless_use_embedded_resources)
}
